rxPredict(dTree2_mrs, data = test,
overwrite = TRUE)
paste0("AUC of Decision Tree Model:",
rxAuc(rxRoc("ArrDel15", "ArrDel15_Pred", test)))
rxRocCurve("ArrDel15",
predVarNames = c("ArrDel15_Pred", "ArrDel15_Pred_Logit"),
data = test,
title = "ROC curve - Logistic regression")
c(850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980, 930, 650, 760, 810, 1000, 1000, 960, 960)
michelson  <- c(850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980, 930, 650, 760, 810, 1000, 1000, 960, 960)
michelsonNew <- c(michelson, 850, 930, 940, 970, 870)
michelsonNew
normalDat <- rnorm(25)
normalDat
normalSat <- rnorm(25, mean=450, sd=100)
normalSat
uniformDat <- runif(25)
uniformDat
uniformPerc <- runif(25, min=0, max=100)
uniformPerc
1:10
seq(length = 11, from = 10, to = 30)
seq(from = 10,length = 20, by = 4)
plot(michelson)
plot(normalDat)
plot(uniformPerc)
plot(1:10)
stem(michelson)
stem(normalDat)
normalDat
michelson
stem(michelson)
stem(michelson)
hist(michelson)
hist(michelson) # with defined groups
hist(michelson, nclass=5) # with defined groups
qqnorm(michelson) # check for normal distribution
summary(michelson)
boxplot(normalDat, uniformDat)
rxHistogram(michelson)
rxHistogram(data=michelson)
getwd()
msStats <- read.table("msStats.txt", header=TRUE)
View(msStats)
msStats
view(msStats)
view(msstats)
View(msStats)
view(msStats)
msStats
ls("package:datasets")
euro
quakes
Titanic
attitude
plot(attitude)
attitudeLM1 <- lm(rating ~ complaints, data=attitude) # read ~ as depends on
summary(attitudeLM1)
help(lm)
(attitudeLM1)
plot(attitudeLM1)
help(par)
par(mfrow=c(2,2))
plot(attitudeLM1)
A <- matrix(c(3, 5, 7, 9, 13, 15, 8, 4, 2), ncol=3)
A
A+A
A*A
A %*% A
View(msStats)
View(msStats)
attitude
plot(attitude)
help(lm)
attitudeLM1 <- lm(rating ~ complaints, data=attitude)
plot(attitudeLM1)
help (plot)
?(par)
help (plot)
summary(attitudeLM1)
?summary
apply(A, 2, prod)
?apply
objects()
rm(destdata_mrs, newVarInfo)
rm(destData_mrs, newVarInfo)
grep("one", c("a test", "a basic string", "and one that we want", "one two three"))
grep("one", c("a test", "a basic string", "and one that we want", "one two three"))
source('C:/Bob/Source/RClient01/ms R tutorial01.R')
data()
data("women")
women
print(women)
View(women)
nrow(women)
ncol(women)
summary(women)
summary(women)
summary(women)
summary(women)
summary(women)
str(women)
str(women) # structure of dataset
dim(women)
length(women)
Hi <- "Hello World!"
class(Hi)
1/0
myList <- list(5, "Hello", "Worlds", TRUE)
dim(myList)
dim(myList)
(myList)
class(myList)
class(myList)
myList
class(myList)
class(myList[[1]])
women$height
class(women$height)
class(women[[1]])
class(women[1]) # numeric
men <- data.frame(height = c(50:65), weight = c(150:165))
men
names(men) <- c("Male Height", "Male Weight")
men
m <- matrix(nrow = 4, ncol = 5, 1:20)
m
f <- factor(c("Hello", "World", "Hello", "Annie", "Hello", "World"))
f
table(f)
list1 <- list(x = 1:10, y = c("Tami", "Victor", "Emily"), z = matrix(c(3, 5, 4, 7), nrow=2))
list1
lapply(list1, length)
rxGetOption("sampleDataDir")
file.path(rxGetOption("sampleDataDir"), "mortDefaultSmall2000.csv")
rxGetOption("sampleDataDir") # C:/Program Files/Microsoft/R Client/R_SERVER/library/RevoScaleR/SampleData
inDataFile <- file.path(rxGetOption("sampleDataDir"), "mortDefaultSmall2000.csv")
mortData <- rxImport(inData = inDataFile)
list.files(rxGetOption("sampleDataDir"))
mortOutput <- NULL
mortData <- rxImport(inData = inDataFile, outFile = mortOutput)
View(mortData)
type(mortData)
class(mortData)
nrow(mortData)
ncol(mortData)
names(mortData)
head(mortData, n = 3)
head(mortData)
rxGetInfo(mortData, getVarInfo = TRUE, numRows=3)
?cut
mortDataNew <- rxDataStep(
# Specify the input data set
inData = mortData,
# Put in a placeholder for an output file
outFile = outFile2,
# Specify any variables to keep or drop
varsToDrop = c("year"),
# Specify rows to select
rowSelection = creditScore < 850,
# Specify a list of new variables to create
transforms = list(
catDebt = cut(ccDebt, breaks = c(0, 6500, 13000),
labels = c("Low Debt", "High Debt")),
lowScore = creditScore < 625))
mortDataNew <- rxDataStep(
# Specify the input data set
inData = mortData,
# Put in a placeholder for an output file
# outFile = outFile2,
# Specify any variables to keep or drop
varsToDrop = c("year"),
# Specify rows to select
rowSelection = creditScore < 850,
# Specify a list of new variables to create
transforms = list(
catDebt = cut(ccDebt, breaks = c(0, 6500, 13000),
labels = c("Low Debt", "High Debt")),
lowScore = creditScore < 625))
rxGetInfo(mortDataNew)
rxGetInfo(mortDataNew, getVarInfo = TRUE, numRows=3)
rxGetInfo(mortDataNew, getVarInfo = TRUE, numRows=3)
?rxGetInfo
rxHistogram(~creditScore, data = mortDataNew )
mortCube <- rxCube(~F(creditScore):catDebt, data = mortDataNew)
rxLinePlot(Counts~creditScore|catDebt, data=rxResultsDF(mortCube))
myLogit <- rxLogit(default~ccDebt+yearsEmploy , data=mortDataNew)
summary(myLogit)
mortDataNew <- rxDataStep(
# Specify the input data set
inData = mortData,
# Put in a placeholder for an output file
outFile = NULL,
# Specify any variables to keep or drop
varsToDrop = c("year"),
# Specify rows to select
rowSelection = creditScore < 850,
# Specify a list of new variables to create
transforms = list(
catDebt = cut(ccDebt, breaks = c(0, 6500, 13000),
labels = c("Low Debt", "High Debt")),
lowScore = creditScore < 625))
bigDataDir <- "C:\Data\MortData" # Specify the location
bigDataDir <- "C:\\Data\\MortData"
bigDataDir
bigDataDir <- "C:\Data\MortData
bigDataDir <- "C:\Data\MortData"
?Quotes
bigDataDir <- "C:\\Data\\MortData"
bigDataDir
.Platform$file.sep
list.files(bigDataDir)
bigDataDir <- "C:\Data\MortData"
bigDataDir <- "C:\MRS\BigData"
bigDataDir <- "C:\\Data\\MortData"
list.files(bigDataDir)
?mortDefaultSmall
bigDataDir <- "C:/Data/MortData"
list.files(bigDataDir)
bigDataDir
file.path("C:"", "Data", "MortData")
file.path("C:", "Data", "MortData")
bigDataDir <- file.path("C:", "Data", "MortData")
bigDataDir
list.files(bigDataDir)
getpwd()
getwd()
dataIn = file.path(bigDataDir, "mortDefault2000.csv")
dataIn
rm(bigDataDir)
dataDir <- file.path("C:", "Data", "MortData")
list.files(dataDir)
dataIn = file.path(dataDir, "mortDefault2000.csv")
dataIn
rm(dataIn)
dataFileIn = file.path(dataDir, "mortDefault2000.csv")
dataFileIn
inFileName = file.path(dataDir, "mortDefault2000.csv")
inFileName
mortCsvFileName = file.path(dataDir, "mortDefault2000.csv")
mortXdfFileName = file.path(dataDir, "mortDefault.xdf")
mortCsvFileName = file.path(dataDir, "mortDefault")
append <- "none"
for (i in 2000:2009)
{
importFile <- paste(mortCsvFileName, i, ".csv", sep="")
#mortDS <- rxImport(importFile, mortXdfFileName, append=append)
#append <- "rows"
}
importFile
mortCsvFileName = file.path(dataDir, "mortDefault") # start of data file name
mortXdfFileName = file.path(dataDir, "mortDefault.xdf")
list.files(dataDir)
append <- "none"
for (i in 2000:2009)
{
importFile <- paste(mortCsvFileName, i, ".csv", sep="") # "C:/Data/MortData/mortDefault2009.csv"
mortDS <- rxImport(importFile, mortXdfFileName, append=append)
append <- "rows"
}
rxGetInfo(mortDS, numRows=5
rxGetInfo(mortDS, numRows=5)
rxGetInfo(mortDS, numRows=5)
rxSummary(~., data = mortDS, blocksPerRead = 2) # (blocksPerRead ignored on local client)
days = [["ran", "was tired"], ["ran", "was not tired"], ["didn't run", "was tired"], ["ran", "was tired"], ["didn't run", "was not tired"], ["ran", "was not tired"], ["ran", "was tired"]]
?dplyrXdf
??dplyrXdf
pwd()
getwd()fnames=list.files("aclImdb", pattern = "[[:digit:]_]+.txt", recursive = TRUE, full.names = TRUE)
getwd()
dataDir <- "C:\Bob\Data\acllmdb\aclImdb\train\pos"
dataDir <- "C:\\Bob\Data\\acllmdb\\aclImdb\\train\\pos"
dataDir <- "C:/\Bob\Data/\acllmdb\\aclImdb\\train\\pos"
dataDir <- "C:\\Bob\Data\\acllmdb\\aclImdb\\train\\pos"
dataDir <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
dataDir <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
list.files(dataDir)
list.files(dataInDir, pattern = "[[:digit:]_]+.txt", recursive = TRUE, full.names = TRUE)
dataInDir <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
list.files(dataInDir, pattern = "[[:digit:]_]+.txt", recursive = TRUE, full.names = TRUE)
list.files(dataInDir, pattern = "[[:digit:]_]+.txt", recursive = TRUE, full.names = FALSE)
list.files(dataInDir)
list.files(dataInDir, pattern = "[[:digit:]_]+.txt", recursive = TRUE, full.names = FALSE, ignore,case= TRUE)
list.files(dataInDir, pattern = "[[:digit:]_]+.txt", recursive = TRUE, full.names = FALSE, ignore.case= TRUE)
list.files(dataInDir, pattern = "[[:digit:]_]+.txt", recursive = TRUE, full.names = FALSE, ignore.case= TRUE)
grep
grep
list.files(dataInDir)
PathNameIn <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
list.files(PathNameIn) #, pattern = "[[:digit:]_]+.txt", recursive = TRUE, full.names = FALSE, ignore.case= TRUE)
PathNameIn <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
FileList = list.files(PathNameIn) #, pattern = "[[:digit:]_]+.txt", recursive = TRUE, full.names = FALSE, ignore.case= TRUE)
grep(".txt", FileList, value="TRUE")
PathNameIn <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
FileList = list.files(PathNameIn) #, pattern = "[[:digit:]_]+.txt", recursive = TRUE, full.names = FALSE, ignore.case= TRUE)
grep(".txt", FileList, value="FALSE")
datapath <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
fnames = list.files(datapath) #, pattern = "[[:digit:]_]+.txt", recursive = TRUE, full.names = FALSE, ignore.case= TRUE)
grep(".txt", fnames, value="FALSE")
datapath <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
fnames = list.files(datapath) #, pattern = "[[:digit:]_]+.txt", recursive = TRUE, full.names = FALSE, ignore.case= TRUE)
grep(".txt", fnames, value="TRUE")
datapath <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
fnames = list.files(datapath) #, pattern = "[[:digit:]_]+.txt", recursive = TRUE, full.names = FALSE, ignore.case= TRUE)
length(grep(".txt", fnames, value="TRUE"))
datapath <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
fnames = list.files(datapath) #, pattern = "[[:digit:]_]+.txt", recursive = TRUE, full.names = FALSE, ignore.case= TRUE)
length(grep(".txt", fnames, value="TRUE"))
grep(".csv", fnames, value="TRUE")
print ("hello")
datapath <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
fnames <- list.files(datapath) #, pattern = "[[:digit:]_]+.txt", recursive = TRUE, full.names = FALSE, ignore.case= TRUE)
fnames <- grep(".txt", fnames, value="TRUE")
length(grep(".txt", fnames, value="TRUE"))
print(sprintf("Files found: %d", length(fnames)))
fnames
print(sprintf("Files found: %d", length(fnames)))
message(sprintf("Files found: %d", length(fname
message(sprintf("Files found: %d", length(fnames)))
grep(".csv", fnames, value="TRUE")
message(sprintf("Files found: %d", length(fnames)))
datapath <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
fnames <- list.files(datapath)
fnames <- grep(".txt", fnames, value="TRUE")
fnames <- sample(fnames)
message(sprintf("Files found: %d", length(fnames)))
datapath <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
fnames <- list.files(datapath)
fnames <- grep(".txt", fnames, value="TRUE")
fnames <- sample(fnames)
message(sprintf("Files found: %d", length(fnames)))
datapath <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
fnames <- list.files(datapath)
fnames <- grep(".txt", fnames, value="TRUE")
fnames <- sample(fnames, 100)
message(sprintf("Files found: %d", length(fnames)))
datapath <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
fnames <- list.files(datapath)
fnames <- grep(".txt", fnames, value="TRUE")
fnames <- sample(fnames, 100)
message(sprintf("Files found: %d", length(fnames)))
fnames
datapath <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
fnames <- list.files(datapath)
fnames <- grep(".txt", fnames, value="TRUE")
fnames <- sample(fnames, 100)
message(sprintf("Files found: %d", length(fnames)))
fnames
datapath <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
fnames <- list.files(datapath)
fnames <- grep(".txt", fnames, value="TRUE")
fnames <- sample(fnames, 100)
message(sprintf("Files found: %d", length(fnames)))
fnames
fnames
options()
unlist (
options())
l.ex <- list(a = list(1:5, LETTERS[1:5]), b = "Z", c = NA)
l.ex
unlist(l.ex, recursive = FALSE)
l1 <- list(a = "a", b = 2, c = pi+2i)
l1 <- list(a = "a", b = 2, c = pi+2i)
l1 <- list(a = "a", b = 2, c = pi+2i)
l1
unlist(l1)
l1 = list(, "B", 12)
l1 = list(5, "B", 12)
l1
unlist(l1)
strsplit(fnames,"[.]")
strsplit(fnames,".")
strsplit(fnames,"[.]")
scores <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
scores <- strsplit(scores,"_")
scores <- strsplit(scores[1],"_")
strsplit(scores[1],"_")
fnames <- strsplit(fnames,"[.]")[1]
fnames
fnames <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
fnames <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
fnames <- sample(fnames, 100)
message(sprintf("Files found: %d", length(fnames)))
fnames <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
fnames <- sample(fnames, 100)
fnames <- list.files(datapath)
fnames <- grep(".txt", fnames, value="TRUE")
fnames <- grep(".txt", fnames, value="TRUE")
fnames
fnames <- strsplit(fnames,"[.]")
fnames
fnames[1]
fnames
datapath <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
fnames <- list.files(datapath)
fnames <- grep(".txt", fnames, value="TRUE")
# Sample
fnames <- sample(fnames, 100)
message(sprintf("Files found: %d", length(fnames)))
fnames <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
fnames <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
fnames
fnames
unlist
unlist(fnames)
fnames
type(fnames)
class(fnames)
fnames
fnames[1]
class(fnames[1])
fnames[, 1]
fnames[1]
fnames[1][1]
fnames[1:1]
fnames[[1]]
fnames[[1]][[1]]
class(fnames[1])
class(fnames[1][1])
class(fnames[1][1])
fnames[[1]][[1]]
l1[1]
l1 <- list("one", "two", "three")
l1[1]
class l[1]
class li[1]
class l1[1]
test <- list("one", "two", "three")
test[1]
class test[1]
test <- list("one", "two", "three")
test[1]
class (test[1])
test[1]; class (test[1])
test <- list("one", "two", "three"); test[1]; class (test[1]); test[[1]]; class(test[[1]])
test <- list("one", "two", "three"); test[1]; class(test[1]); test[[1]]; class(test[[1]])
fnames <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
datapath <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
fnames <- list.files(datapath)
fnames <- grep(".txt", fnames, value="TRUE")
# Sample
fnames <- sample(fnames, 100)
message(sprintf("Files found: %d", length(fnames)))
fnames <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
fnames <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
fnames <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
datapath <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
fnames <- list.files(datapath)
fnames <- grep(".txt", fnames, value="TRUE")
fnames <- sample(fnames, 100)
fnames <- sample(fnames, 100)
fnames
fnames <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
fnames <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
datapath <- "C:\\Bob\\Data\\acllmdb\\aclImdb\\train\\pos"
fnames <- list.files(datapath)
fnames <- grep(".txt", fnames, value="TRUE")
fnames <- sample(fnames, 100)
fnames <- sample(fnames, 100)
fnames
message(sprintf("Files found: %d", length(fnames)))
nameparts <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
nameparts <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
nameparts
nameparts[[1]]
nameparts[[1]][1]
class(nameparts[[1]][1])
nameparts[[1]]
nameparts
nameparts[[1]]
nameparts[[1]][1]
class(nameparts[[1]][1])
nameparts <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
nameparts
unlist(nameparts) # flattens into single dim
nameparts <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
scores <- strsplit(nameparts[1],"_")
scores <- strsplit(nameparts[[1]][1],"_")
scores <- strsplit(nameparts[[1]][1],"_")
scores
scoresplt <- strsplit(nameparts[[1]][1],"_")
scoresplt
scoresplit <- strsplit(nameparts[[1]][1],"_")
scoresplit
nameparts
fnames[[1]][[1]]
fnames[[]][[1]]
fnames[[1]] # [ returns multiple via list or df, [[ return single object of class
nameparts <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
nameparts
scoresplit <- strsplit(nameparts[[1]][1],"_")
scoresplit
nameparts <- nameparts[1]
nameparts
nameparts <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
nameparts
nameparts <- nameparts[1]
nameparts
nameparts <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
nameparts
nameparts <- namepart[[1]]
nameparts <- nameparts[[1]]
nameparts
nameparts <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
# class(nameparts[[1]][1]) == character, also unlist(nameparts) # flattens into single dim
# scoresplit <- strsplit(nameparts[[1]][1],"_")
nameparts <- nameparts[1]
nameparts
nameparts
nameparts <- strsplit(fnames,"[.]")  #[1] "7835_9" "txt"
nameparts
nameparts[1]
