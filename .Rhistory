github <- "https://raw.githubusercontent.com/Microsoft/RTVS-docs/master/examples/MRS_and_Machine_Learning/Datasets/"
inputFileFlightURL <- paste0(github, "Flight_Delays_Sample.csv")
inputFileWeatherURL <- paste0(github, "Weather_Sample.csv")
td <- tempdir()
outFileFlight <- paste0(td, "/flight.xdf")
outFileWeather <- paste0(td, "/weather.xdf")
outFileOrigin <- paste0(td, "/originData.xdf")
outFileDest <- paste0(td, "/destData.xdf")
outFileFinal <- paste0(td, "/finalData.xdf")
#Import the flight data.
flight_mrs <- rxImport(
inData = inputFileFlightURL, outFile = outFileFlight,
missingValueString = "M", stringsAsFactors = FALSE,
# Remove columns that are possible target leakers from the flight data.
varsToDrop = c("DepDelay", "DepDel15", "ArrDelay", "Cancelled", "Year"),
# Define "Carrier" as categorical.
colInfo = list(Carrier = list(type = "factor")),
# Round down scheduled departure time to full hour.
transforms = list(CRSDepTime = floor(CRSDepTime/100)),
overwrite = TRUE
)
head(flight_mrs)
rxSummary(~., data = flight_mrs, blocksPerRead = 2)
xform <- function(dataList) {
# Create a function to normalize some numerical features.
featureNames <- c(
"Visibility",
"DryBulbCelsius",
"DewPointCelsius",
"RelativeHumidity",
"WindSpeed",
"Altimeter"
)
dataList[featureNames] <- lapply(dataList[featureNames], scale)
return(dataList)
}
weather_mrs <- rxImport(
inData = inputFileWeatherURL, outFile = outFileWeather,
missingValueString = "M", stringsAsFactors = FALSE,
# Eliminate some features due to redundance.
varsToDrop = c("Year", "Timezone",
"DryBulbFarenheit", "DewPointFarenheit"),
# Create a new column "DestAirportID" in weather data.
transforms = list(DestAirportID = AirportID),
# Apply the normalization function.
transformFunc = xform,
transformVars = c(
"Visibility",
"DryBulbCelsius",
"DewPointCelsius",
"RelativeHumidity",
"WindSpeed",
"Altimeter"
),
overwrite = TRUE
)
weather_mrs <- rxImport(
inData = inputFileWeatherURL, outFile = outFileWeather,
missingValueString = "M", stringsAsFactors = FALSE,
# Eliminate some features due to redundance.
varsToDrop = c("Year", "Timezone",
"DryBulbFarenheit", "DewPointFarenheit"),
# Create a new column "DestAirportID" in weather data.
transforms = list(DestAirportID = AirportID),
# Apply the normalization function.
transformFunc = xform,
transformVars = c(
"Visibility",
"DryBulbCelsius",
"DewPointCelsius",
"RelativeHumidity",
"WindSpeed",
"Altimeter"
),
overwrite = TRUE
)
rxGetVarInfo(weather_mrs)
#Step 2: Pre-process Data
#Prepare for a merge by renaming some columns in the weather data.
newVarInfo <- list(
AdjustedMonth = list(newName = "Month"),
AdjustedDay = list(newName = "DayofMonth"),
AirportID = list(newName = "OriginAirportID"),
AdjustedHour = list(newName = "CRSDepTime")
)
rxSetVarInfo(varInfo = newVarInfo, data = weather_mrs)
originData_mrs <- rxMerge(
inData1 = flight_mrs, inData2 = weather_mrs, outFile = outFileOrigin,
type = "inner", autoSort = TRUE,
matchVars = c("Month", "DayofMonth", "OriginAirportID", "CRSDepTime"),
varsToDrop2 = "DestAirportID",
overwrite = TRUE
)
destData_mrs <- rxMerge(
inData1 = originData_mrs, inData2 = weather_mrs, outFile = outFileDest,
type = "inner", autoSort = TRUE,
matchVars = c("Month", "DayofMonth", "DestAirportID", "CRSDepTime"),
varsToDrop2 = c("OriginAirportID"),
duplicateVarExt = c("Origin", "Destination"),
overwrite = TRUE
)
rxFactors(inData = destData_mrs, outFile = outFileFinal, sortLevels = TRUE,
factorInfo = c("OriginAirportID", "DestAirportID"),
overwrite = TRUE)
rxSplit(inData = outFileFinal,
outFilesBase = paste0(td, "/modelData"),
outFileSuffixes = c("Train", "Test"),
splitByFactor = "splitVar",
overwrite = TRUE,
transforms = list(
splitVar = factor(sample(c("Train", "Test"),
size = .rxNumRows,
replace = TRUE,
prob = c(.80, .20)),
levels = c("Train", "Test"))),
rngSeed = 17,
consoleOutput = TRUE)
train <- RxXdfData(paste0(td, "/modelData.splitVar.Train.xdf"))
test <- RxXdfData(paste0(td, "/modelData.splitVar.Test.xdf"))
modelFormula <- formula(train, depVars = "ArrDel15",
varsToDrop = c("RowNum", "splitVar"))
logitModel_mrs <- rxLogit(modelFormula, data = train)
summary(logitModel_mrs)
rxPredict(logitModel_mrs, data = test,
type = "response",
predVarNames = "ArrDel15_Pred_Logit",
overwrite = TRUE)
paste0("AUC of Logistic Regression Model:",
rxAuc(rxRoc("ArrDel15", "ArrDel15_Pred_Logit", test)))
rxRocCurve("ArrDel15", "ArrDel15_Pred_Logit", data = test,
title = "ROC curve - Logistic regression")
dTree1_mrs <- rxDTree(modelFormula, data = train, reportProgress = 1)
treeCp_mrs <- rxDTreeBestCp(dTree1_mrs)
dTree2_mrs <- prune.rxDTree(dTree1_mrs, cp = treeCp_mrs)
rxPredict(dTree2_mrs, data = test,
overwrite = TRUE)
paste0("AUC of Decision Tree Model:",
rxAuc(rxRoc("ArrDel15", "ArrDel15_Pred", test)))
rxRocCurve("ArrDel15",
predVarNames = c("ArrDel15_Pred", "ArrDel15_Pred_Logit"),
data = test,
title = "ROC curve - Logistic regression")
c(850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980, 930, 650, 760, 810, 1000, 1000, 960, 960)
michelson  <- c(850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980, 930, 650, 760, 810, 1000, 1000, 960, 960)
michelsonNew <- c(michelson, 850, 930, 940, 970, 870)
michelsonNew
normalDat <- rnorm(25)
normalDat
normalSat <- rnorm(25, mean=450, sd=100)
normalSat
uniformDat <- runif(25)
uniformDat
uniformPerc <- runif(25, min=0, max=100)
uniformPerc
1:10
seq(length = 11, from = 10, to = 30)
seq(from = 10,length = 20, by = 4)
plot(michelson)
plot(normalDat)
plot(uniformPerc)
plot(1:10)
stem(michelson)
stem(normalDat)
normalDat
michelson
stem(michelson)
stem(michelson)
hist(michelson)
hist(michelson) # with defined groups
hist(michelson, nclass=5) # with defined groups
qqnorm(michelson) # check for normal distribution
summary(michelson)
boxplot(normalDat, uniformDat)
rxHistogram(michelson)
rxHistogram(data=michelson)
getwd()
msStats <- read.table("msStats.txt", header=TRUE)
View(msStats)
msStats
view(msStats)
view(msstats)
View(msStats)
view(msStats)
msStats
ls("package:datasets")
euro
quakes
Titanic
attitude
plot(attitude)
attitudeLM1 <- lm(rating ~ complaints, data=attitude) # read ~ as depends on
summary(attitudeLM1)
help(lm)
(attitudeLM1)
plot(attitudeLM1)
help(par)
par(mfrow=c(2,2))
plot(attitudeLM1)
A <- matrix(c(3, 5, 7, 9, 13, 15, 8, 4, 2), ncol=3)
A
A+A
A*A
A %*% A
View(msStats)
View(msStats)
attitude
plot(attitude)
help(lm)
attitudeLM1 <- lm(rating ~ complaints, data=attitude)
plot(attitudeLM1)
help (plot)
?(par)
help (plot)
summary(attitudeLM1)
?summary
apply(A, 2, prod)
?apply
objects()
rm(destdata_mrs, newVarInfo)
rm(destData_mrs, newVarInfo)
grep("one", c("a test", "a basic string", "and one that we want", "one two three"))
grep("one", c("a test", "a basic string", "and one that we want", "one two three"))
source('C:/Bob/Source/RClient01/ms R tutorial01.R')
data()
data("women")
women
print(women)
View(women)
nrow(women)
ncol(women)
summary(women)
summary(women)
summary(women)
summary(women)
summary(women)
str(women)
str(women) # structure of dataset
dim(women)
length(women)
Hi <- "Hello World!"
class(Hi)
1/0
myList <- list(5, "Hello", "Worlds", TRUE)
dim(myList)
dim(myList)
(myList)
class(myList)
class(myList)
myList
class(myList)
class(myList[[1]])
women$height
class(women$height)
class(women[[1]])
class(women[1]) # numeric
men <- data.frame(height = c(50:65), weight = c(150:165))
men
names(men) <- c("Male Height", "Male Weight")
men
m <- matrix(nrow = 4, ncol = 5, 1:20)
m
f <- factor(c("Hello", "World", "Hello", "Annie", "Hello", "World"))
f
table(f)
list1 <- list(x = 1:10, y = c("Tami", "Victor", "Emily"), z = matrix(c(3, 5, 4, 7), nrow=2))
list1
lapply(list1, length)
rxGetOption("sampleDataDir")
file.path(rxGetOption("sampleDataDir"), "mortDefaultSmall2000.csv")
rxGetOption("sampleDataDir") # C:/Program Files/Microsoft/R Client/R_SERVER/library/RevoScaleR/SampleData
inDataFile <- file.path(rxGetOption("sampleDataDir"), "mortDefaultSmall2000.csv")
mortData <- rxImport(inData = inDataFile)
list.files(rxGetOption("sampleDataDir"))
mortOutput <- NULL
mortData <- rxImport(inData = inDataFile, outFile = mortOutput)
View(mortData)
type(mortData)
class(mortData)
nrow(mortData)
ncol(mortData)
names(mortData)
head(mortData, n = 3)
head(mortData)
rxGetInfo(mortData, getVarInfo = TRUE, numRows=3)
?cut
mortDataNew <- rxDataStep(
# Specify the input data set
inData = mortData,
# Put in a placeholder for an output file
outFile = outFile2,
# Specify any variables to keep or drop
varsToDrop = c("year"),
# Specify rows to select
rowSelection = creditScore < 850,
# Specify a list of new variables to create
transforms = list(
catDebt = cut(ccDebt, breaks = c(0, 6500, 13000),
labels = c("Low Debt", "High Debt")),
lowScore = creditScore < 625))
mortDataNew <- rxDataStep(
# Specify the input data set
inData = mortData,
# Put in a placeholder for an output file
# outFile = outFile2,
# Specify any variables to keep or drop
varsToDrop = c("year"),
# Specify rows to select
rowSelection = creditScore < 850,
# Specify a list of new variables to create
transforms = list(
catDebt = cut(ccDebt, breaks = c(0, 6500, 13000),
labels = c("Low Debt", "High Debt")),
lowScore = creditScore < 625))
rxGetInfo(mortDataNew)
rxGetInfo(mortDataNew, getVarInfo = TRUE, numRows=3)
rxGetInfo(mortDataNew, getVarInfo = TRUE, numRows=3)
?rxGetInfo
rxHistogram(~creditScore, data = mortDataNew )
mortCube <- rxCube(~F(creditScore):catDebt, data = mortDataNew)
rxLinePlot(Counts~creditScore|catDebt, data=rxResultsDF(mortCube))
myLogit <- rxLogit(default~ccDebt+yearsEmploy , data=mortDataNew)
summary(myLogit)
mortDataNew <- rxDataStep(
# Specify the input data set
inData = mortData,
# Put in a placeholder for an output file
outFile = NULL,
# Specify any variables to keep or drop
varsToDrop = c("year"),
# Specify rows to select
rowSelection = creditScore < 850,
# Specify a list of new variables to create
transforms = list(
catDebt = cut(ccDebt, breaks = c(0, 6500, 13000),
labels = c("Low Debt", "High Debt")),
lowScore = creditScore < 625))
bigDataDir <- "C:\Data\MortData" # Specify the location
bigDataDir <- "C:\\Data\\MortData"
bigDataDir
bigDataDir <- "C:\Data\MortData
bigDataDir <- "C:\Data\MortData"
?Quotes
bigDataDir <- "C:\\Data\\MortData"
bigDataDir
.Platform$file.sep
list.files(bigDataDir)
bigDataDir <- "C:\Data\MortData"
bigDataDir <- "C:\MRS\BigData"
bigDataDir <- "C:\\Data\\MortData"
list.files(bigDataDir)
?mortDefaultSmall
bigDataDir <- "C:/Data/MortData"
list.files(bigDataDir)
bigDataDir
file.path("C:"", "Data", "MortData")
file.path("C:", "Data", "MortData")
bigDataDir <- file.path("C:", "Data", "MortData")
bigDataDir
list.files(bigDataDir)
getpwd()
getwd()
dataIn = file.path(bigDataDir, "mortDefault2000.csv")
dataIn
rm(bigDataDir)
dataDir <- file.path("C:", "Data", "MortData")
list.files(dataDir)
dataIn = file.path(dataDir, "mortDefault2000.csv")
dataIn
rm(dataIn)
dataFileIn = file.path(dataDir, "mortDefault2000.csv")
dataFileIn
inFileName = file.path(dataDir, "mortDefault2000.csv")
inFileName
mortCsvFileName = file.path(dataDir, "mortDefault2000.csv")
mortXdfFileName = file.path(dataDir, "mortDefault.xdf")
mortCsvFileName = file.path(dataDir, "mortDefault")
append <- "none"
for (i in 2000:2009)
{
importFile <- paste(mortCsvFileName, i, ".csv", sep="")
#mortDS <- rxImport(importFile, mortXdfFileName, append=append)
#append <- "rows"
}
importFile
mortCsvFileName = file.path(dataDir, "mortDefault") # start of data file name
mortXdfFileName = file.path(dataDir, "mortDefault.xdf")
list.files(dataDir)
append <- "none"
for (i in 2000:2009)
{
importFile <- paste(mortCsvFileName, i, ".csv", sep="") # "C:/Data/MortData/mortDefault2009.csv"
mortDS <- rxImport(importFile, mortXdfFileName, append=append)
append <- "rows"
}
rxGetInfo(mortDS, numRows=5
rxGetInfo(mortDS, numRows=5)
rxGetInfo(mortDS, numRows=5)
rxSummary(~., data = mortDS, blocksPerRead = 2) # (blocksPerRead ignored on local client)
