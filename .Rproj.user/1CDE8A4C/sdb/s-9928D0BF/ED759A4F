{
    "collab_server" : "",
    "contents" : "#############################################\n##           ENTIRE EXAMPLE SCRIPT          ##\n#############################################\n\n#Step 1: Prep and Import Data\n#Initialize some variables to specify the data sets.\ngithub <- \"https://raw.githubusercontent.com/Microsoft/RTVS-docs/master/examples/MRS_and_Machine_Learning/Datasets/\"\ninputFileFlightURL <- paste0(github, \"Flight_Delays_Sample.csv\")\ninputFileWeatherURL <- paste0(github, \"Weather_Sample.csv\")\n\n#Create a temporary directory to store the intermediate XDF files. (external data frame)\ntd <- tempdir()\noutFileFlight <- paste0(td, \"/flight.xdf\")\noutFileWeather <- paste0(td, \"/weather.xdf\")\noutFileOrigin <- paste0(td, \"/originData.xdf\")\noutFileDest <- paste0(td, \"/destData.xdf\")\noutFileFinal <- paste0(td, \"/finalData.xdf\")\n\n#Import the flight data.\nflight_mrs <- rxImport(\n  inData = inputFileFlightURL, outFile = outFileFlight,\n  missingValueString = \"M\", stringsAsFactors = FALSE,\n  # Remove columns that are possible target leakers from the flight data.\n  varsToDrop = c(\"DepDelay\", \"DepDel15\", \"ArrDelay\", \"Cancelled\", \"Year\"),\n  # Define \"Carrier\" as categorical.\n  colInfo = list(Carrier = list(type = \"factor\")),\n  # Round down scheduled departure time to full hour.\n  transforms = list(CRSDepTime = floor(CRSDepTime/100)),  \n  overwrite = TRUE\n)\n\n#Review the first six rows of flight data.\nhead(flight_mrs)\n\n#Summarize the flight data.\nrxSummary(~., data = flight_mrs, blocksPerRead = 2)\n\n#Import the weather data.\nxform <- function(dataList) {\n  # Create a function to normalize some numerical features.\n  featureNames <- c(\n    \"Visibility\", \n    \"DryBulbCelsius\", \n    \"DewPointCelsius\", \n    \"RelativeHumidity\", \n    \"WindSpeed\", \n    \"Altimeter\"\n  )\n  dataList[featureNames] <- lapply(dataList[featureNames], scale)\n  return(dataList)\n}\n\nweather_mrs <- rxImport(\n  inData = inputFileWeatherURL, outFile = outFileWeather,\n  missingValueString = \"M\", stringsAsFactors = FALSE,\n  # Eliminate some features due to redundance.\n  varsToDrop = c(\"Year\", \"Timezone\", \n                 \"DryBulbFarenheit\", \"DewPointFarenheit\"),\n  # Create a new column \"DestAirportID\" in weather data.\n  transforms = list(DestAirportID = AirportID),\n  # Apply the normalization function.\n  transformFunc = xform,  \n  transformVars = c(\n    \"Visibility\", \n    \"DryBulbCelsius\", \n    \"DewPointCelsius\", \n    \"RelativeHumidity\", \n    \"WindSpeed\", \n    \"Altimeter\"\n  ),\n  overwrite = TRUE\n)\n\n#Review the variable information for the weather data.\nrxGetVarInfo(weather_mrs)\n\n\n#Step 2: Pre-process Data\n#Prepare for a merge by renaming some columns in the weather data.\nnewVarInfo <- list(\n  AdjustedMonth = list(newName = \"Month\"),\n  AdjustedDay = list(newName = \"DayofMonth\"),\n  AirportID = list(newName = \"OriginAirportID\"),\n  AdjustedHour = list(newName = \"CRSDepTime\")\n)\nrxSetVarInfo(varInfo = newVarInfo, data = weather_mrs)\n\n#Concatenate/Merge flight records and weather data.\n##Join flight records and weather data at origin of the flight `OriginAirportID`.\noriginData_mrs <- rxMerge(\n  inData1 = flight_mrs, inData2 = weather_mrs, outFile = outFileOrigin,\n  type = \"inner\", autoSort = TRUE, \n  matchVars = c(\"Month\", \"DayofMonth\", \"OriginAirportID\", \"CRSDepTime\"),\n  varsToDrop2 = \"DestAirportID\",\n  overwrite = TRUE\n)\n\n##Join flight records and weather data using the destination of the flight `DestAirportID`.\ndestData_mrs <- rxMerge(\n  inData1 = originData_mrs, inData2 = weather_mrs, outFile = outFileDest,\n  type = \"inner\", autoSort = TRUE, \n  matchVars = c(\"Month\", \"DayofMonth\", \"DestAirportID\", \"CRSDepTime\"),\n  varsToDrop2 = c(\"OriginAirportID\"),\n  duplicateVarExt = c(\"Origin\", \"Destination\"),\n  overwrite = TRUE\n)\n\n##Call the rxFactors() function to convert `OriginAirportID` and `DestAirportID` as categorical.\nrxFactors(inData = destData_mrs, outFile = outFileFinal, sortLevels = TRUE,\n          factorInfo = c(\"OriginAirportID\", \"DestAirportID\"),\n          overwrite = TRUE)\n\n\n#Step 3: Prepare Training and Test Datasets\n#Randomly split data (80% for training, 20% for testing).\nrxSplit(inData = outFileFinal,\n        outFilesBase = paste0(td, \"/modelData\"),\n        outFileSuffixes = c(\"Train\", \"Test\"),\n        splitByFactor = \"splitVar\",\n        overwrite = TRUE,\n        transforms = list(\n          splitVar = factor(sample(c(\"Train\", \"Test\"),\n                                   size = .rxNumRows,\n                                   replace = TRUE,\n                                   prob = c(.80, .20)),\n                            levels = c(\"Train\", \"Test\"))),\n        rngSeed = 17,\n        consoleOutput = TRUE)\n\n#Point to the XDF files for each set.\ntrain <- RxXdfData(paste0(td, \"/modelData.splitVar.Train.xdf\"))\ntest <- RxXdfData(paste0(td, \"/modelData.splitVar.Test.xdf\"))\n\n\n#Step 4: Predict using Logistic Regression\n#Choose and apply the Logistic Regression learning algorithm.\n\n#Build the formula.\nmodelFormula <- formula(train, depVars = \"ArrDel15\",\n                        varsToDrop = c(\"RowNum\", \"splitVar\"))\n\n#Fit a Logistic Regression model.\nlogitModel_mrs <- rxLogit(modelFormula, data = train)\n\n#Review the model results.\nsummary(logitModel_mrs)\n\n#Predict using new data.\n#Predict the probability on the test dataset.\nrxPredict(logitModel_mrs, data = test,\n          type = \"response\",\n          predVarNames = \"ArrDel15_Pred_Logit\",\n          overwrite = TRUE)\n\n#Calculate Area Under the Curve (AUC).\npaste0(\"AUC of Logistic Regression Model:\",\n       rxAuc(rxRoc(\"ArrDel15\", \"ArrDel15_Pred_Logit\", test)))\n\n#Plot the ROC curve.\nrxRocCurve(\"ArrDel15\", \"ArrDel15_Pred_Logit\", data = test,\n           title = \"ROC curve - Logistic regression\")\n\n#Step 5: Predict using Decision Tree\n#Choose and apply the Decision Tree learning algorithm.\n#Build a decision tree model.\ndTree1_mrs <- rxDTree(modelFormula, data = train, reportProgress = 1)\n\n#Find the Best Value of cp for Pruning rxDTree Object.\ntreeCp_mrs <- rxDTreeBestCp(dTree1_mrs)\n\n#Prune a decision tree created by rxDTree and return the smaller tree.\ndTree2_mrs <- prune.rxDTree(dTree1_mrs, cp = treeCp_mrs)\n\n#Predict using new data.\n#Predict the probability on the test dataset.\nrxPredict(dTree2_mrs, data = test, \n          overwrite = TRUE)\n\n#Calculate Area Under the Curve (AUC).\npaste0(\"AUC of Decision Tree Model:\",\n       rxAuc(rxRoc(\"ArrDel15\", \"ArrDel15_Pred\", test)))\n\n#Plot the ROC curve.\nrxRocCurve(\"ArrDel15\",\n           predVarNames = c(\"ArrDel15_Pred\", \"ArrDel15_Pred_Logit\"),\n           data = test,\n           title = \"ROC curve - Logistic regression\")         ",
    "created" : 1515557526491.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3536368589",
    "id" : "ED759A4F",
    "lastKnownWriteTime" : 1515558620,
    "last_content_update" : 1515558620389,
    "path" : "C:/Bob/Source/RClient01/FlightDelay.R",
    "project_path" : "FlightDelay.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}