{
    "collab_server" : "",
    "contents" : "# https://docs.microsoft.com/en-gb/machine-learning-server/r/tutorial-r-to-revoscaler\n# https://www.stat.berkeley.edu/~nolan/stat133/Fall05/lectures/RegEx.html\n# https://www.sitepoint.com/introduction-r-rstudio/\n#\n# c(ombine) data  into vector\n# remember linear algebra: input vector -> fn() -> output vector , any number of items in either vector ok\n\nmichelson  <- c(850, 740, 900, 1070, 930, 850, 950, 980, 980, 880, 1000, 980, 930, 650, 760, 810, 1000, 1000, 960, 960)\n\n# and add more\nmichelsonNew <- c(michelson, 850, 930, 940, 970, 870)\nmichelsonNew\n\n# generate 25 random numbers in normal distribution \nnormalDat <- rnorm(25)\nnormalDat\n\n# defaults to mean=0, standard deviation =1 which can be overriden\nnormalSat <- rnorm(25, mean=450, sd=100)\nnormalSat\n\n# uniform distribution also common\nuniformDat <- runif(25)\nuniformDat\n\n#min=0, max=1 defaults can be overridden\nuniformPerc <- runif(25, min=0, max=100)\nuniformPerc\n\n#sequences common\n1:10\n\n# or use seq fn  (see RevoScalR for better big data format)\nseq(length = 11, from = 10, to = 30)\nseq(from = 10,length = 20, by = 4)\n\n# visualise small data sets with plot\nplot(michelson)\nplot(normalDat)\nplot(uniformPerc)\nplot(1:10)\n\n# stem show distribution like histogram eg take front as stem and rest as leaf and plot\n# so 12, 13, 14, 26, 22 goes to 1|235 2|26\n\nmichelson\nstem(michelson) \nhist(michelson) \nhist(michelson, nclass=5) # with defined groups (to match stem)\n \nqqnorm(michelson) # check for normal distribution (should be straight)\n\nboxplot(normalDat, uniformDat) # ood for comparing distributions\n\nsummary(michelson)\n# Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n# 650     850     940     909     980    1070 \n\n# Note ok for small datsets but extensions like rxHistogram and rcCube support big data\n\nrxHistogram(data=michelson)\n\ngetwd() # created txt file of data and saved in \"C:/Bob/Source/RClient01\"\n\nmsStats <- read.table(\"msStats.txt\", header=TRUE) #smart unpack and col name standardisation\nmsStats # display dataframe data\nView(msStats)\n\nls(\"package:datasets\") # list built in dataframes to play with\n\nattitude\n\nplot(attitude)\n\n\n# The first two variables (rating and complaints) show a strong linear relationship. To model that relationship, we use the lm function:\n\n# eg use regression analysis to create linear model whereby function returns dependent variable y (response) based on independent variable(s) x1, x2 .. (predictors)\nattitudeLM1 <- lm(rating ~ complaints, data=attitude)  # read ~ as depends on  -- help(lm)\n\nsummary(attitudeLM1) # show summary of model ?summary\n\n# view together using parameters function -- ?(par) -- help (plot)\npar(mfrow=c(2,2)) # setup parameters\nplot(attitudeLM1)\n\n# ms extensions for big data:\n# lm : rxLinMod\n# glm : rxLogit rxGlm\n# kmeans : rxKmeans\n# rpart : rxDTree\n\n# Matrix (single data type)\nA <- matrix(c(3, 5, 7, 9, 13, 15, 8, 4, 2), ncol=3)\nA\n# Arithmetic goes element by element\n\nA+A\nA*A\nA %*% A # linear algebra multiplication\napply(A, 2, prod) # apply function to each element ?apply can use it to sort\n\n#lapply - apply fn() to list\nlist1 <- list(x = 1:10, y = c(\"Tami\", \"Victor\", \"Emily\"), z = matrix(c(3, 5, 4, 7), nrow=2))\nlist1\nlapply(list1, length)\n\n# https://docs.microsoft.com/en-gb/machine-learning-server/r/tutorial-r-to-revoscaler\n#\n# Microsoft ReveoScaleR functions (scalable functions which can be run locally or pushed to sql server)\n# 'RevoScaleR provides the foundation for a variety of high performance, scalable data analyse'\n# rxImport -- load from datasource (data installed as part of RevocaleR package)\n# Full data sets available here: https://packages.revolutionanalytics.com/datasets/\n\nlist.files(rxGetOption(\"sampleDataDir\"))\nrxGetOption(\"sampleDataDir\") # C:/Program Files/Microsoft/R Client/R_SERVER/library/RevoScaleR/SampleData\n# file.path concats string collection with correct os syntax : file.path(\"f:\", \"git\", \"surveyor\") == \"f:/git/surveyor\"\ninDataFile <- file.path(rxGetOption(\"sampleDataDir\"), \"mortDefaultSmall2000.csv\")\n\n?mortDefaultSmall\n\n# returns memory sized data frame, we could specify output parameter to create xdf file on disk (RxXdfData object = ms block based storage format, good for distributed processing)\nmortOutput <- NULL\nmortData <- rxImport(inData = inDataFile, outFile = mortOutput)\n\nclass(mortData) # data.frame\nnrow(mortData)\nncol(mortData)\nnames(mortData)\nhead(mortData, n = 3)\nrxGetInfo(mortData, getVarInfo = TRUE, numRows=3)\n\n# transform data\nmortDataNew <- rxDataStep(\n  # Specify the input data set\n  inData = mortData,\n  # Put in a placeholder for an output file\n  outFile = NULL,\n  # Specify any variables to keep or drop\n  varsToDrop = c(\"year\"),\n  # Specify rows to select\n  rowSelection = creditScore < 850,\n  # Specify a list of new variables to create\n  transforms = list(\n    catDebt = cut(ccDebt, breaks = c(0, 6500, 13000),\n                  labels = c(\"Low Debt\", \"High Debt\")),\n    lowScore = creditScore < 625))\n\nrxGetInfo(mortDataNew, getVarInfo = TRUE, numRows=3)\n\n# Data frame: mortDataNew \n# Number of observations: 9982 \n# Number of variables: 7 \n# Variable information: \n#   Var 1: creditScore, Type: integer, Low/High: (486, 847)\n# Var 2: houseAge, Type: integer, Low/High: (0, 40)\n# Var 3: yearsEmploy, Type: integer, Low/High: (0, 14)\n# Var 4: ccDebt, Type: integer, Low/High: (0, 12275)\n# Var 5: default, Type: integer, Low/High: (0, 1)\n# Var 6: catDebt\n# 2 factor levels: Low Debt High Debt\n# Var 7: lowScore, Type: logical, Low/High: (0, 1)\n# Data (3 rows starting with row 1):\n#   creditScore houseAge yearsEmploy ccDebt default   catDebt lowScore\n# 1         691       16           9   6725       0 High Debt    FALSE\n# 2         691        4           4   5077       0  Low Debt    FALSE\n\n?rxGetInfo\nrxHistogram(~creditScore, data = mortDataNew )\n\n#rxCube computes category counts\nmortCube <- rxCube(~F(creditScore):catDebt, data = mortDataNew)         \n\n# line plot, 2 categories, use rxResultsDF to convert to cube output to dataframe\nrxLinePlot(Counts~creditScore|catDebt, data=rxResultsDF(mortCube))\n\n# Useful RevoScaleR analysis functions:\n\n# rxLogit(): logistic regesssion\n# rxSummary(): computing summary statistics\n# rxCrossTabs(): computing cross-tabs\n# rxLinMod(): estimating linear models\n# rxGlm(): generalized linear models\n# rxCovCor(): estimating variance-covariance or correlation matrices\n\n# Output can be used as inputs to other R functions such as principal components analysis and factor analysis.\n# calc default depending on debt and yearsEmploy\nmyLogit <- rxLogit(default~ccDebt+yearsEmploy , data=mortDataNew)\nsummary(myLogit)\n\n\n# Step through again but at big data scale based on xdf format instead of in-memory (otherwise same functions)\n# see https://docs.microsoft.com/en-us/machine-learning-server/r/tutorial-revoscaler-large-data-loan\n\n# Was:\n# inDataFile <- file.path(rxGetOption(\"sampleDataDir\"), \"mortDefaultSmall2000.csv\")\n# returns memory sized data frame, we could specify output parameter to create xdf file on disk (RxXdfData object = ms block based storage format, good for distributed processing)\n# mortOutput <- NULL\n# mortData <- rxImport(inData = inDataFile, outFile = mortOutput)\n\n# note can use also getwd() and setwd() for working directory defaults\n\n# ?Quotes for help on escape chars\ndataDir <- file.path(\"C:\", \"Data\", \"MortData\") # uses correct slash for os\nlist.files(dataDir) \n\nmortCsvFileName = file.path(dataDir, \"mortDefault\") # start of data file name\nmortXdfFileName = file.path(dataDir, \"mortDefault.xdf\")\n  \n# loop pulling in each data file by name and appending content to xdf file\nappend <- \"none\"\nfor (i in 2000:2009)\n{\n  importFile <- paste(mortCsvFileName, i, \".csv\", sep=\"\") # \"C:/Data/MortData/mortDefault2009.csv\"\n  mortDS <- rxImport(importFile, mortXdfFileName, append=append, overwrite=TRUE)\n  append <- \"rows\"\n}\n\nrxGetInfo(mortDS, numRows=5)\nrxSummary(~., data = mortDS, blocksPerRead = 2) # (blocksPerRead ignored on local client)\n\n\nrxGetOption(\"sampleDataDir\") # C:/Program Files/Microsoft/R Client/R_SERVER/library/RevoScaleR/SampleData\n.Platform$file.sep\n\n\n# Keep going\n# https://docs.microsoft.com/en-us/machine-learning-server/r/tutorial-revoscaler-large-data-loan\n\n\nlogitObj <- rxLogit(default~F(year) + creditScore + yearsEmploy + ccDebt,\n                    data = mortDS,\n                    blocksPerRead = 2,\n                    reportProgress = 1)\nsummary(logitObj)\n\nlogitObj <- rxLogit(default  ~ F(houseAge) + F(year)+ creditScore + yearsEmploy + ccDebt,\n                    data = mortDS,\n                    blocksPerRead = 2,\n                    reportProgress = 1)\nsummary(logitObj)\n\ncc <- coef(logitObj)\ndf <- data.frame(Coefficient=cc[2:41], HouseAge=0:39)\nrxLinePlot(Coefficient~HouseAge,data=df, type=\"p\")\n\n#\n#\n#useful basics\nobjects() # list all objects\nrm(destData_mrs, newVarInfo) # remove objects\n# save(x,y,x, file=\"myfile.rda\") load(\"myfile.rda\") save and load to save/load variables into file\ndata() # show built in datasets\ndata(\"women\") # load dataset\nwomen # same as print(women)\nnrow(women) #15\nncol(women) #2\nsummary(women) # display varies depending on type of vector - here gives stats for each numeric vector\nstr(women) # structure of dataset - shows class/datatype is dataframe, 15 observations (rows), 2 variables (columns)\ndim(women) # 15, 2 == rows, columns\nlength(women) # colcount for dataets, length for vectors\nHi <- \"Hello World!\"\nclass(Hi) # class/datatype == Character\n\n# Automic Classes : character, numeric(==float), as.numeric to coerce, use Inf for infinity eg 1/0\n# ints auto coerced to numercis unless forced with as.integer or specified with L suffix 5L\n# Complex for imaginary numbers, Logical for boolean (use as.logical)\n# NaN == Not a number 1/0, NA = Not Available (missing)\n\n# Higher Types (made of automic types)\n# Vector = collection of elements of same type use vector function or just c(concatinate)\n#        Strictly 1 dimensional, adding them merges them into one vector\n# [1] in output means the next item is element number 1 -- for reference / readability, nothing to do with data\n\n# range operator allows generation MyRange <- c(1:10)\n\n# Lists like vectors but can hold multiple types\nmyList <- list(5, \"Hello\", \"Worlds\", TRUE)\nmyList # [[1]] means first element of list is vector [1] means fist element of vector follows\nclass(myList) # list\nclass(myList[[1]]) #numeric\n\n# Data.Frame == Table use $ to reference columns, use women$\"max head\" for spaces or position women[1]\nwomen$height # returns numeric vector, class(women$height) == numeric\n# head/tail limit output to console\nclass(women[1]) # data.frame as part of parent\nclass(women[[1]]) # numeric as takes column as vector\n\n# make data.frame\nmen <- data.frame(height = c(50:65), weight = c(150:165))\n# names function returns/sets column names\nnames(men) <- c(\"Male Height\", \"Male Weight\")\n\n# Matrix = multidimensional vector (all same type)\nm <- matrix(nrow = 4, ncol = 5, 1:20) # values repeated until matrix full\nm\n# can reshape with dim function: dim(m) <- c(3,5) or dim(m) <- NULL to return to vector\n# see cbind and rbind for further functionality (data frames as well)\n\n# Factors == vectors with labels (self describing to help R functions)\nf <- factor(c(\"Hello\", \"World\", \"Hello\", \"Annie\", \"Hello\", \"World\"))\nf\n# levels == unique elements\n# table function create table with each factor as column and frequency\ntable(f)\n\n\n#regular expressions\ngrep(\"one\", c(\"a test\", \"a basic string\", \"and one that we want\", \"one two three\")) \n\n",
    "created" : 1515558699416.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3563775862",
    "id" : "19A4A3C0",
    "lastKnownWriteTime" : 1516678626,
    "last_content_update" : 1517461342204,
    "path" : "C:/Bob/Source/RClient01/ms R tutorial01.R",
    "project_path" : "ms R tutorial01.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}